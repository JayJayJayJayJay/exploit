#pragma once
#include <Windows.h>
#include <string>
#include <sstream>
#include <iostream>
#include <vector>
#include <fstream>
#include <iterator>
#include <WinINet.h>
#include <algorithm>
#include <random>
#include <typeinfo>
#include <fcntl.h>
#include <io.h>
#include "Memory.h"

int lua_State = 0;
int ScriptContext = 0;

#pragma comment(lib, "wininet.lib")

DWORD DymanicBase;
#define aslr(x) (x - 0x400000 + (int)GetModuleHandle(0))
#define RReturnFlag1_address aslr(0x14773B0)

//To Find Retcheck Flags Address
//Open IDA. Wait for IDA to be IDLE.
//View Strings. Look up the string "isdst". After you have xrefed it,
//F5 it aka pesodocode, find sub_here(a1, -1, "isdst") http://prntscr.com/dt8wxm after you found
//Double Click it it should redirect you.
//http://prntscr.com/dt8x0s
//The dwords are the flags.
//The result = (int (*)())sub_subhere(a1) is Retcheck.
//http://prntscr.com/dt8x7q

#define RReturnFlag2_address aslr(0x15982EC)//find them urself bitch
#define RReturnCheckFunction_address aslr(0x5046B0)//find them urself bitch
#define RInstanceNew_address aslr(0x7A2C40)//ignore

auto Returncheck() //louka's retcheck
{
	int rccheck_function = RReturnCheckFunction_address; //Retcheck Function's Address
	int flag1 = RReturnFlag1_address; //Retcheck 1st Flag's Address
	int flag2 = RReturnFlag2_address; //Retcheck 2nd Flag's Address

	int flag1_val = *(int*)(flag1);
	int flag2_val = *(int*)(flag2);
	DWORD nOldProtect;
	BYTE OldJump = *(BYTE*)(rccheck_function);
	VirtualProtect((LPVOID)(rccheck_function), 1, PAGE_EXECUTE_READWRITE, &nOldProtect);
	*(BYTE*)(rccheck_function) = 0xC3;
	return [&]() {
		*(int*)flag1 = flag1_val;
		*(int*)flag2 = flag2_val;
		*(BYTE*)(rccheck_function) = OldJump;
		VirtualProtect((PVOID)(rccheck_function), 1, nOldProtect, &nOldProtect);
	};
}

DWORD getaddy2(DWORD address) { //aslr proto xd
	DWORD base = (DWORD)GetModuleHandle(L"RobloxPlayerBeta.exe");
	return address - 0x400000 + base;
}



typedef int(__thiscall *ns)(int self);
ns openstate = (ns)getaddy2(0x4E1370);
//To Find openstate aka globalstate is look up 'globalStates[vm_index].state'
//Find the xref for it by clicking X.
//Ok F5 it (pesodocode it)
//See the first line? the sub_sub is globalstate
//http://prntscr.com/dt8y2l


typedef void(__cdecl *Lua_getfield)(int lua_State, int idx, const char *k);
Lua_getfield rlua_getfield = (Lua_getfield)getaddy2(0x4FE3E0); //first sub in isdst
typedef int(__cdecl *Lua_pcall)(int lua_State, int naArgs, int nresults, int errfunc);
Lua_pcall rlua_pcall = (Lua_pcall)getaddy2(0x4FF0C0);
//look up *** Value Not Found *** 1st xref find the call above valuenotfound which starts with 53 or 54
typedef void(__cdecl *Lua_setfield)(int lua_State, int idx, const char *k);
Lua_setfield rlua_setfield = (Lua_setfield)getaddy2(0x4FFF30); //
//proceed over to __metatable first xref then F5 it return sub_sub is setfield
//http://prntscr.com/dt8yum
typedef void(__cdecl *Lua_pushstring)(int lua_State, const char *s);
Lua_pushstring rlua_pushstring = (Lua_pushstring)getaddy2(0x4FF620);
// look up Libraries must contain a \"Help\" function F5 then find (sub_here(a1, "Help"))
typedef void(__cdecl *Lua_pushvalue)(int lua_State, int idx);
Lua_pushvalue rlua_pushvalue = (Lua_pushvalue)getaddy2(0x4FF6E0); //k1
//find safeFunctor then f5 then find LABEL23: sub_here is pushvalue
typedef void(__cdecl *Lua_pushnumber)(int lua_State, double number);
Lua_pushnumber rlua_pushnumber = (Lua_pushnumber)getaddy2(0x4FF5A0);
//look up field '%s' missing in data table  then find (else{ sub_THIS IS IT(a1, COERCE__INT64((double)v17)


void lua_getfield(int ls, int idx, const char* k) {
	rlua_getfield(ls, idx, k);
}

void lua_pcall(int ls, int nArgs, int nresults, int errfunc) {
	auto ret = Returncheck();
	rlua_pcall(ls, nArgs, nresults, errfunc);
	ret();
}

void lua_pushstring(int ls, const char* s) {
	rlua_pushstring(ls, s);
}

void lua_pushvalue(int ls, int idx) {
	auto ret = Returncheck();
	rlua_pushvalue(ls, idx);
	ret();
}

void lua_pushnumber(int ls, double number) {
	auto ret = Returncheck();
	rlua_pushnumber(ls, number);
	ret();
}

void lua_setfield(int ls, int idx, const char* k) {
	auto ret = Returncheck();
	rlua_setfield(ls, idx, k);
	ret();
}

void lua_pushboolean(int ls, int a1) {

}

void lua_getglobal(int luaState, const char* k) {
	return rlua_getfield(luaState, -10002, k);
};

bool lua_isnil(int luaState, int n) {
	return true;
};

void lua_pop(int luaState, int n) {
};


std::vector<std::string> split(std::string s) {
	std::vector<std::string> elems;
	std::stringstream ss(s);
	std::istream_iterator<std::string> begin(ss);
	std::istream_iterator<std::string> end;
	std::vector<std::string> vstrings(begin, end);
	return vstrings;
}


void Scan() {
	DWORD DataModelA = getaddy2(0x118DAAC); //scriptcontextvftable  look for "Script Context", blah blah then look for this: v35 = 0; v35 = 0;*(_DWORD *)v1 = &off_HERE;
	ScriptContext = mem::Scan(PAGE_READWRITE, (char*)&DataModelA, "xxxx"); //scans for scriptcontext
	lua_State = openstate(ScriptContext); //openstate returns lua_State
}

void DoCommand(std::string Cmd) {
	auto rt_unhook = Returncheck();
	std::vector<std::string> In = split(Cmd);

	if (In.at(0) == "ff") {
		lua_getglobal(lua_State, "game");
		lua_getfield(lua_State, -1, "Players");
		lua_getfield(lua_State, -1, "LocalPlayer");
		lua_getfield(lua_State, -1, "Character");
		lua_getglobal(lua_State, "Instance");
		lua_getfield(lua_State, -1, "new");
		lua_pushstring(lua_State, "ForceField");
		lua_pushvalue(lua_State, -4);
		lua_pcall(lua_State, 2, 0, 0);
	}

	else if (In.at(0) == "speed") {
		lua_getglobal(lua_State, "game");
		lua_getfield(lua_State, -1, "Players");
		lua_getfield(lua_State, -1, "LocalPlayer");
		lua_getfield(lua_State, -1, "Character");
		lua_getfield(lua_State, -1, "Humanoid");
		lua_pushnumber(lua_State, 100);
		lua_setfield(lua_State, -2, "WalkSpeed");
	}

	else if (In.at(0) == "fire") {
		lua_getglobal(lua_State, "game");
		lua_getfield(lua_State, -1, "Players");
		lua_getfield(lua_State, -1, "LocalPlayer");
		lua_getfield(lua_State, -1, "Character");
		lua_getfield(lua_State, -1, "Torso");
		lua_getglobal(lua_State, "Instance");
		lua_getfield(lua_State, -1, "new");
		lua_pushstring(lua_State, "Fire");
		lua_pushvalue(lua_State, -4);
		lua_pcall(lua_State, 2, 0, 0);
	}

	else if (In.at(0) == "sparkles") {
		lua_getglobal(lua_State, "game");
		lua_getfield(lua_State, -1, "Players");
		lua_getfield(lua_State, -1, "LocalPlayer");
		lua_getfield(lua_State, -1, "Character");
		lua_getfield(lua_State, -1, "Torso");
		lua_getglobal(lua_State, "Instance");
		lua_getfield(lua_State, -1, "new");
		lua_pushstring(lua_State, "Sparkles");
		lua_pushvalue(lua_State, -4);
		lua_pcall(lua_State, 2, 0, 0); //basically this is like in LUA Instance.new("Sparkles", game.Players.LocalPlayer.Character.Torso)
	}

	else if (In.at(0) == "smoke") {
		lua_getglobal(lua_State, "game");
		lua_getfield(lua_State, -1, "Players");
		lua_getfield(lua_State, -1, "LocalPlayer");
		lua_getfield(lua_State, -1, "Character");
		lua_getfield(lua_State, -1, "Torso");
		lua_getglobal(lua_State, "Instance");
		lua_getfield(lua_State, -1, "new");
		lua_pushstring(lua_State, "Smoke");
		lua_pushvalue(lua_State, -4);
		lua_pcall(lua_State, 2, 0, 0);
	}

	else if (In.at(0) == "btools") {
		lua_getglobal(lua_State, "game");
		lua_getfield(lua_State, -1, "Players");
		lua_getfield(lua_State, -1, "LocalPlayer");
		lua_getfield(lua_State, -1, "Backpack");
		lua_getglobal(lua_State, "Instance");
		lua_getfield(lua_State, -1, "new");
		lua_pushstring(lua_State, "HopperBin");
		lua_pushvalue(lua_State, -4);
		lua_pcall(lua_State, 2, 1, 0);
		lua_pushnumber(lua_State, 1);
		lua_setfield(lua_State, -2, "BinType");


		lua_getglobal(lua_State, "game");
		lua_getfield(lua_State, -1, "Players");
		lua_getfield(lua_State, -1, "LocalPlayer");
		lua_getfield(lua_State, -1, "Backpack");
		lua_getglobal(lua_State, "Instance");
		lua_getfield(lua_State, -1, "new");
		lua_pushstring(lua_State, "HopperBin");
		lua_pushvalue(lua_State, -4);
		lua_pcall(lua_State, 2, 1, 0);
		lua_pushnumber(lua_State, 2);
		lua_setfield(lua_State, -2, "BinType");


		lua_getglobal(lua_State, "game");
		lua_getfield(lua_State, -1, "Players");
		lua_getfield(lua_State, -1, "LocalPlayer");
		lua_getfield(lua_State, -1, "Backpack");
		lua_getglobal(lua_State, "Instance");
		lua_getfield(lua_State, -1, "new");
		lua_pushstring(lua_State, "HopperBin");
		lua_pushvalue(lua_State, -4);
		lua_pcall(lua_State, 2, 1, 0);
		lua_pushnumber(lua_State, 3);
		lua_setfield(lua_State, -2, "BinType");


		lua_getglobal(lua_State, "game");
		lua_getfield(lua_State, -1, "Players");
		lua_getfield(lua_State, -1, "LocalPlayer");
		lua_getfield(lua_State, -1, "Backpack");
		lua_getglobal(lua_State, "Instance");
		lua_getfield(lua_State, -1, "new");
		lua_pushstring(lua_State, "HopperBin");
		lua_pushvalue(lua_State, -4);
		lua_pcall(lua_State, 2, 1, 0);
		lua_pushnumber(lua_State, 4);
		lua_setfield(lua_State, -2, "BinType");
	}

	else if (In.at(0) == "god") {
		lua_getglobal(lua_State, "game");
		lua_getfield(lua_State, -1, "Players");
		lua_getfield(lua_State, -1, "LocalPlayer");
		lua_getfield(lua_State, -1, "Character");
		lua_getfield(lua_State, -1, "Humanoid");
		lua_pushnumber(lua_State, HUGE_VAL);
		lua_setfield(lua_State, -2, "MaxHealth");
	}

	else if (In.at(0) == "speed") {
		lua_getglobal(lua_State, "game");
		lua_getfield(lua_State, -1, "Players");
		lua_getfield(lua_State, -1, "LocalPlayer");
		lua_getfield(lua_State, -1, "Character");
		lua_getfield(lua_State, -1, "Humanoid");
		lua_pushstring(lua_State, "100");
		lua_setfield(lua_State, -2, "WalkSpeed");
	}

	else if (In.at(0) == "print") {
		lua_getglobal(lua_State, "print");
		lua_pushstring(lua_State, "Project Nexus Loaded.");
		lua_pcall(lua_State, 1, 0, 0);
	}

	rt_unhook();

}

void Main() {
	Scan();
	Sleep(2500);
	DoCommand("ff");
	DoCommand("fire");
	DoCommand("sparkles");
	DoCommand("hint");
	DoCommand("speed");
	DoCommand("btools");
	DoCommand("ff");
	DoCommand("print");
	while (1) {
		
	}
}
